#!/usr/bin/env python
# -*- coding: utf-8 -*-

# CAVEAT UTILITOR
#
# This file was automatically generated by Grako.
#
#    https://pypi.python.org/pypi/grako/
#
# Any changes you make to it will be overwritten the next time
# the file is generated.


from __future__ import print_function, division, absolute_import, unicode_literals

from grako.parsing import graken, Parser
from grako.util import re, RE_FLAGS


__version__ = (2016, 4, 22, 2, 2, 56, 4)

__all__ = [
    'LilyParser',
    'LilySemantics',
    'main'
]


class LilyParser(Parser):
    def __init__(self,
                 whitespace=None,
                 nameguard=None,
                 comments_re='(?!%{!)%{(.|\\s)*?%}',
                 eol_comments_re='(?!%{)%.*?$',
                 ignorecase=None,
                 left_recursion=True,
                 **kwargs):
        super(LilyParser, self).__init__(
            whitespace=whitespace,
            nameguard=nameguard,
            comments_re=comments_re,
            eol_comments_re=eol_comments_re,
            ignorecase=ignorecase,
            left_recursion=left_recursion,
            **kwargs
        )

    @graken()
    def _lilypond_(self):

        def block0():
            self._toplevel_element_()
        self._closure(block0)
        self._check_eof()

    @graken()
    def _toplevel_element_(self):
        with self._choice():
            with self._option():
                self._documentable_element_()
            with self._option():
                self._embedded_scheme_()
            with self._option():
                self._lilypond_block_()
            with self._option():
                self._token_()
            self._error('no available options')

    @graken()
    def _documentable_element_(self):
        self._name_definition_()

    @graken()
    def _identifier_(self):
        self._pattern(r'(?<![^\W\d])[^\W\d_]+([_-][^\W\d_]+)*(?![_-]?[^\W\d])')

    @graken()
    def _doc_comment_(self):
        with self._group():
            self._token('%{!')
            self._cut()
            self._pattern(r'((?!%})(.|\s))*')
            self.ast['@'] = self.last_node
            self._pattern(r'%}')
        self._cut()

    @graken()
    def _name_definition_(self):
        with self._optional():
            self._doc_comment_()
        self.ast['documentation'] = self.last_node
        self._identifier_()
        self.ast['name'] = self.last_node
        self._token('=')

        self.ast._define(
            ['documentation', 'name'],
            []
        )

    @graken()
    def _embedded_scheme_(self):
        self._token('#')
        with self._group():
            with self._choice():
                with self._option():
                    self._embedded_scheme_pre_()
                    self._scheme_()
                    self.ast['@'] = self.last_node
                    self._embedded_scheme_post_()
                with self._option():
                    self._scheme_parse_error_()
                self._error('no available options')

    @graken()
    def _embedded_scheme_pre_(self):
        pass
        self.ast['pre'] = self.last_node

        self.ast._define(
            ['pre'],
            []
        )

    @graken()
    def _embedded_scheme_post_(self):
        pass
        self.ast['post'] = self.last_node

        self.ast._define(
            ['post'],
            []
        )

    @graken()
    def _scheme_parse_error_(self):
        pass
        self.ast['error'] = self.last_node

        self.ast._define(
            ['error'],
            []
        )

    @graken()
    def _scheme_(self):
        with self._choice():
            with self._option():
                self._scheme_quote_()
                self._scheme_()
            with self._option():
                self._string_()
            with self._option():
                self._scheme_list_()
            with self._option():
                self._scheme_catchall_()
            self._error('no available options')

    @graken()
    def _scheme_quote_(self):
        self._token("'")

    @graken()
    def _scheme_list_(self):
        self._token('(')
        with self._group():
            with self._choice():
                with self._option():
                    self._scheme_list_body_()
                with self._option():
                    pass
                self._error('no available options')
        self._token(')')

    @graken()
    def _scheme_list_body_(self):

        def block0():
            self._scheme_()
        self._closure(block0)

    @graken()
    def _scheme_catchall_(self):
        self._pattern(r'((?!\(|\)|\s)(.))+')

    @graken()
    def _lilypond_block_(self):
        self._token('{')
        with self._group():
            with self._choice():
                with self._option():
                    self._lilypond_block_body_()
                with self._option():
                    pass
                self._error('no available options')
        self._token('}')

    @graken()
    def _lilypond_block_body_(self):

        def block0():
            with self._choice():
                with self._option():
                    self._lilypond_block_()
                with self._option():
                    self._string_()
                with self._option():
                    self._token_()
                self._error('no available options')
        self._closure(block0)

    @graken()
    def _token_(self):
        self._pattern(r'((?!{|}|\s)(.))+')

    @graken()
    def _string_(self):
        with self._group():
            self._token('"')
            self._cut()
            self._pattern(r'([^"]|\\"|\\\\)*')
            self.ast['@'] = self.last_node
            self._token('"')
        self._cut()


class LilySemantics(object):
    def lilypond(self, ast):
        return ast

    def toplevel_element(self, ast):
        return ast

    def documentable_element(self, ast):
        return ast

    def identifier(self, ast):
        return ast

    def doc_comment(self, ast):
        return ast

    def name_definition(self, ast):
        return ast

    def embedded_scheme(self, ast):
        return ast

    def embedded_scheme_pre(self, ast):
        return ast

    def embedded_scheme_post(self, ast):
        return ast

    def scheme_parse_error(self, ast):
        return ast

    def scheme(self, ast):
        return ast

    def scheme_quote(self, ast):
        return ast

    def scheme_list(self, ast):
        return ast

    def scheme_list_body(self, ast):
        return ast

    def scheme_catchall(self, ast):
        return ast

    def lilypond_block(self, ast):
        return ast

    def lilypond_block_body(self, ast):
        return ast

    def token(self, ast):
        return ast

    def string(self, ast):
        return ast


def main(filename, startrule, trace=False, whitespace=None, nameguard=None):
    import json
    with open(filename) as f:
        text = f.read()
    parser = LilyParser(parseinfo=False)
    ast = parser.parse(
        text,
        startrule,
        filename=filename,
        trace=trace,
        whitespace=whitespace,
        nameguard=nameguard)
    print('AST:')
    print(ast)
    print()
    print('JSON:')
    print(json.dumps(ast, indent=2))
    print()

if __name__ == '__main__':
    import argparse
    import string
    import sys

    class ListRules(argparse.Action):
        def __call__(self, parser, namespace, values, option_string):
            print('Rules:')
            for r in LilyParser.rule_list():
                print(r)
            print()
            sys.exit(0)

    parser = argparse.ArgumentParser(description="Simple parser for Lily.")
    parser.add_argument('-l', '--list', action=ListRules, nargs=0,
                        help="list all rules and exit")
    parser.add_argument('-n', '--no-nameguard', action='store_true',
                        dest='no_nameguard',
                        help="disable the 'nameguard' feature")
    parser.add_argument('-t', '--trace', action='store_true',
                        help="output trace information")
    parser.add_argument('-w', '--whitespace', type=str, default=string.whitespace,
                        help="whitespace specification")
    parser.add_argument('file', metavar="FILE", help="the input file to parse")
    parser.add_argument('startrule', metavar="STARTRULE",
                        help="the start rule for parsing")
    args = parser.parse_args()

    main(
        args.file,
        args.startrule,
        trace=args.trace,
        whitespace=args.whitespace,
        nameguard=not args.no_nameguard
    )
