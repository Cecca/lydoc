#!/usr/bin/env python
# -*- coding: utf-8 -*-

# CAVEAT UTILITOR
#
# This file was automatically generated by Grako.
#
#    https://pypi.python.org/pypi/grako/
#
# Any changes you make to it will be overwritten the next time
# the file is generated.


from __future__ import print_function, division, absolute_import, unicode_literals

from grako.parsing import graken, Parser
from grako.util import re, RE_FLAGS, generic_main  # noqa


__version__ = (2016, 4, 27, 13, 20, 30, 2)

__all__ = [
    'LilyParser',
    'LilySemantics',
    'main'
]

KEYWORDS = set([])


class LilyParser(Parser):
    def __init__(self,
                 whitespace=None,
                 nameguard=None,
                 comments_re=None,
                 eol_comments_re=None,
                 ignorecase=None,
                 left_recursion=True,
                 keywords=KEYWORDS,
                 **kwargs):
        super(LilyParser, self).__init__(
            whitespace=whitespace,
            nameguard=nameguard,
            comments_re=comments_re,
            eol_comments_re=eol_comments_re,
            ignorecase=ignorecase,
            left_recursion=left_recursion,
            keywords=keywords,
            **kwargs
        )

    @graken()
    def _lilypond_(self):

        def block0():
            self._toplevel_element_()
        self._closure(block0)
        self._check_eof()

    @graken()
    def _toplevel_element_(self):
        with self._choice():
            with self._option():
                self._lilypond_comment_()
            with self._option():
                self._documentable_element_()
            with self._option():
                self._embedded_scheme_()
            with self._option():
                self._lilypond_block_()
            with self._option():
                self._token_()
            self._error('no available options')

    @graken()
    def _lilypond_comment_(self):
        with self._choice():
            with self._option():

                def block0():
                    self._eol_comment_()
                self._positive_closure(block0)
            with self._option():
                self._block_comment_()
            self._error('no available options')

    @graken()
    def _eol_comment_(self):
        self._pattern(r'(?!%{)%.*?$')

    @graken()
    def _block_comment_(self):
        self._pattern(r'(?!%{!)%{(.|\s)*?%}')

    @graken()
    def _doc_comment_(self):
        with self._group():
            self._token('%{!')
            self._cut()
            self._pattern(r'((?!%})(.|\s))*')
            self.name_last_node('@')
            self._pattern(r'%}')
        self._cut()

    @graken()
    def _identifier_(self):
        self._pattern(r'(?<![^\W\d])[^\W\d_]+([_-][^\W\d_]+)*(?![_-]?[^\W\d])')

    @graken()
    def _documentable_element_(self):
        with self._choice():
            with self._option():
                self._function_definition_()
            with self._option():
                self._name_definition_()
            self._error('no available options')

    @graken()
    def _name_definition_(self):
        with self._optional():
            self._doc_comment_()
        self.name_last_node('documentation')
        self._identifier_()
        self.name_last_node('name')
        self._token('=')

        self.ast._define(
            ['documentation', 'name'],
            []
        )

    @graken()
    def _function_definition_(self):
        with self._optional():
            self._doc_comment_()
        self.name_last_node('documentation')
        self._identifier_()
        self.name_last_node('name')
        self._token('=')
        self._token('#')
        self._token('(')
        self._token('define-')
        self._pattern(r'(music|void|scheme)')
        self.name_last_node('functionType')
        self._token('-function')
        self._token('(')
        with self._optional():
            self._token('parser')
            self._token('location')

        def block4():
            self._scheme_token_()
        self._closure(block4)
        self.name_last_node('parameters')
        self._token(')')
        self._token('(')

        def block6():
            self._scheme_token_()
        self._closure(block6)
        self.name_last_node('parameterTypes')
        self._token(')')

        def block7():
            self._scheme_()
        self._closure(block7)
        self._token(')')

        self.ast._define(
            ['documentation', 'name', 'functionType', 'parameters', 'parameterTypes'],
            []
        )

    @graken()
    def _embedded_scheme_(self):
        self._token('#')
        with self._group():
            with self._choice():
                with self._option():
                    self._scheme_()
                with self._option():
                    self._embedded_scheme_error_()
                self._error('no available options')

    @graken()
    def _embedded_scheme_error_(self):
        pass
        self.name_last_node('error')
        self._cut()

        self.ast._define(
            ['error'],
            []
        )

    @graken()
    def _scheme_(self):
        with self._choice():
            with self._option():
                self._scheme_comment_()
                with self._optional():
                    self._scheme_()
            with self._option():
                self._token("'")
                self._scheme_()
            with self._option():
                self._string_()
            with self._option():
                self._scheme_token_()
            with self._option():
                self._scheme_list_()
            self._error('no available options')

    @graken()
    def _scheme_list_(self):
        self._token('(')

        def block1():
            self._scheme_()
        self._closure(block1)
        self.name_last_node('list')
        self._token(')')

        self.ast._define(
            ['list'],
            []
        )

    @graken()
    def _scheme_token_(self):
        self._pattern(r'((?!\(|\)|\s)(.))+')

    @graken()
    def _scheme_comment_(self):

        def block0():
            self._scheme_comment_line_()
        self._positive_closure(block0)

    @graken()
    def _scheme_comment_line_(self):
        self._pattern(r';.*$')

    @graken()
    def _lilypond_block_(self):
        self._token('{')
        with self._group():
            with self._choice():
                with self._option():
                    self._lilypond_block_body_()
                with self._option():
                    pass
                self._error('no available options')
        self._token('}')

    @graken()
    def _lilypond_block_body_(self):

        def block0():
            with self._choice():
                with self._option():
                    self._lilypond_comment_()
                with self._option():
                    self._lilypond_block_()
                with self._option():
                    self._string_()
                with self._option():
                    self._token_()
                self._error('no available options')
        self._closure(block0)

    @graken()
    def _token_(self):
        self._pattern(r'((?!{|}|\s)(.))+')

    @graken()
    def _string_(self):
        with self._group():
            self._token('"')
            self._cut()
            self._pattern(r'([^"]|\\"|\\\\)*')
            self.name_last_node('@')
            self._token('"')
        self._cut()


class LilySemantics(object):
    def lilypond(self, ast):
        return ast

    def toplevel_element(self, ast):
        return ast

    def lilypond_comment(self, ast):
        return ast

    def eol_comment(self, ast):
        return ast

    def block_comment(self, ast):
        return ast

    def doc_comment(self, ast):
        return ast

    def identifier(self, ast):
        return ast

    def documentable_element(self, ast):
        return ast

    def name_definition(self, ast):
        return ast

    def function_definition(self, ast):
        return ast

    def embedded_scheme(self, ast):
        return ast

    def embedded_scheme_error(self, ast):
        return ast

    def scheme(self, ast):
        return ast

    def scheme_list(self, ast):
        return ast

    def scheme_token(self, ast):
        return ast

    def scheme_comment(self, ast):
        return ast

    def scheme_comment_line(self, ast):
        return ast

    def lilypond_block(self, ast):
        return ast

    def lilypond_block_body(self, ast):
        return ast

    def token(self, ast):
        return ast

    def string(self, ast):
        return ast


def main(
        filename,
        startrule,
        trace=False,
        whitespace=None,
        nameguard=None,
        comments_re=None,
        eol_comments_re=None,
        ignorecase=None,
        left_recursion=True,
        **kwargs):

    with open(filename) as f:
        text = f.read()
    whitespace = whitespace or None
    parser = LilyParser(parseinfo=False)
    ast = parser.parse(
        text,
        startrule,
        filename=filename,
        trace=trace,
        whitespace=whitespace,
        nameguard=nameguard,
        ignorecase=ignorecase,
        **kwargs)
    return ast

if __name__ == '__main__':
    import json
    ast = generic_main(main, LilyParser, name='Lily')
    print('AST:')
    print(ast)
    print()
    print('JSON:')
    print(json.dumps(ast, indent=2))
    print()
