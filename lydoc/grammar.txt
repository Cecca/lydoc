
@@comments :: /(?!%{!)%{(.|\s)*?%}/
@@eol_comments :: /(?!%{)%.*?$/

lilypond = { toplevel_element } $ ;

toplevel_element = documentable_element
                 | embedded_scheme
                 | lilypond_block
                 | token
                 ;

documentable_element = name_definition ;

(*
 * Identifiers
 * ~~~~~~~~~~~
 * This regular expression matches valid LilyPond identifiers. However,
 * it does not represent all valid scheme symbol names. As of now (20/04/2016)
 * this is not necessary. Maybe in the future it may be necessary to introduce
 * a `scheme_symbol` rule.
 *)

identifier = /(?<![^\W\d])[^\W\d_]+([_-][^\W\d_]+)*(?![_-]?[^\W\d])/ ;

(*
 * Documentation comments
 * ~~~~~~~~~~~~~~~~~~~~~~
 *
 * Documentation comments start with a `%{!` and end with a `%}`.
 * In the pattern used here there is some sort of strange workaround:
 * The closing `%}` is matched using a regular expression instead of a
 * simple string token, because the latter doesn't work in practice.
 *)
doc_comment = ('%{!' ~ @:/((?!%})(.|\s))*/ /%}/) ~ ;

name_definition =
                  documentation:[doc_comment]
                  name:identifier
                  '='
                ;

(*
 * Scheme code
 * ~~~~~~~~~~~
 *)

embedded_scheme = '#' ( scheme | embedded_scheme_error ) ;

embedded_scheme_error = error:() ;

scheme = scheme_comment [ scheme ]
       | "'" scheme
       | string
       | scheme_token
       | scheme_list
       ;

scheme_list = '(' list:{ scheme } ')' ;


(*
 * A regular exception that catches everything except for open
 * parentheses and spaces. For the moment we don't need to
 * distinguish the various elements.
 *)
scheme_token = /((?!\(|\)|\s)(.))+/ ;

scheme_comment = { scheme_comment_line }+ ;

scheme_comment_line = /;.*$/ ;



(*
 * Nested lilypond blocks
 *)

lilypond_block = '{' ( lilypond_block_body | () ) '}' ;

lilypond_block_body = { lilypond_block | string | token } ;


(*
 * A regular exception that catches everything except for open
 * braces and spaces. For the moment we don't need to
 * distinguish the various elements.
 *)
token = /((?!{|}|\s)(.))+/ ;

(*
 * Strings
 * ~~~~~~~~~~~~~~~~
 *
 *  - Only double quote strings are considered
 *  - Multi line strings are allowed
 *)

string = ('"' ~ @:/([^"]|\\"|\\\\)*/ '"') ~ ;

(* Just for reference
 *
 * string_no_multiline = ('"' ~ @:/([^"\n]|\\"|\\\\)*/ '"') ~ ;
 *)
